local em = GetEventManager()
local _
local db, tlw
local dx = 1/GetSetting(SETTING_TYPE_UI, UI_SETTING_CUSTOM_SCALE) --Get UI Scale to draw thin lines correctly
PENTEST_UI_SCALE = dx
local TIMER_UPDATE_RATE = 200
local BOLD_FONT = "EsoUI/Common/Fonts/Univers67.otf"
local AlkoshData = {}
local AlkoshSlotData = {}

-- Addon Namespace
PenTest = PenTest or {}
local PenTest = PenTest
PenTest.name 		= "PenTest"
PenTest.version 	= "19"
PenTest.debug = false

local newBuffValues = GetAPIVersion() >= 100033

-- Logger

local mainlogger
local LOG_LEVEL_VERBOSE = "V"
local LOG_LEVEL_DEBUG = "D"
local LOG_LEVEL_INFO = "I"
local LOG_LEVEL_WARNING ="W"
local LOG_LEVEL_ERROR = "E"

if LibDebugLogger then

	mainlogger = LibDebugLogger.Create(PenTest.name)

	LOG_LEVEL_VERBOSE = LibDebugLogger.LOG_LEVEL_VERBOSE
	LOG_LEVEL_DEBUG = LibDebugLogger.LOG_LEVEL_DEBUG
	LOG_LEVEL_INFO = LibDebugLogger.LOG_LEVEL_INFO
	LOG_LEVEL_WARNING = LibDebugLogger.LOG_LEVEL_WARNING
	LOG_LEVEL_ERROR = LibDebugLogger.LOG_LEVEL_ERROR

end

local function Print(level, ...)

	if mainlogger == nil then return end

	local logger = mainlogger

	if type(logger.Log)=="function" then logger:Log(level, ...) end

end

-- Data for tracked abilities.
local PENTEST_TYPE_SPELLPEN = 1
local PENTEST_TYPE_WEAPONPEN = 2
local PENTEST_TYPE_ALLPEN = 3
local PENTEST_TYPE_VULNERABILITY = 4
local PENTEST_TYPE_OFFBALANCE = 5

local PENTEST_OFFBALANCE = 1
local PENTEST_OFFBALANCE_IMMUNE = 2

local function GetAbilityData()

	local AbilityData = {

		[GetAbilityName(62787)] = { 							-- Major Breach
			value = newBuffValues and 5948 or 5280,
			datatype = newBuffValues and PENTEST_TYPE_ALLPEN or PENTEST_TYPE_SPELLPEN,
			},

		[GetAbilityName(68588)] = { 							-- Minor Breach
			value = newBuffValues and 2974 or 1320,
			datatype = newBuffValues and PENTEST_TYPE_ALLPEN or PENTEST_TYPE_SPELLPEN,
			},

		[GetAbilityName(62484)] = {								-- Major Fracture
			value = 5280,
			datatype = PENTEST_TYPE_WEAPONPEN,
			},

		[GetAbilityName(64144)] = {								-- Minor Fracture
			value = 1320,
			datatype = PENTEST_TYPE_WEAPONPEN,
			},

		[17906] = {												-- Crusher, can get changed by settings !
			value = db.crusherValue or 2108,
			datatype = PENTEST_TYPE_ALLPEN,
			},

		[120007] = {											-- Crusher, Trial Dummy
			value = 2740,
			datatype = PENTEST_TYPE_ALLPEN,
			},

		[75753] = {												-- Alkosh
			value = 3010,
			datatype = PENTEST_TYPE_ALLPEN,
			},

		[120018] = {											-- Alkosh, Trial Dummy
			value = 3010,
			datatype = PENTEST_TYPE_ALLPEN,
			},

		[GetAbilityName(39077)] = {								-- Off Balance
			value = PENTEST_OFFBALANCE,
			datatype = PENTEST_TYPE_OFFBALANCE,
			},

		[GetAbilityName(134599)] = {							-- Off Balance Immunity
			value = PENTEST_OFFBALANCE_IMMUNE,
			datatype = PENTEST_TYPE_OFFBALANCE,
			},

		[GetAbilityName(68359)] = {								-- Minor Vulnerabiltiy (Concussion)
			value = newBuffValues and 5 or 8,
			datatype = PENTEST_TYPE_VULNERABILITY,
			},

		[GetAbilityName(81519)] = {								-- Minor Vulnerabiltiy (Infallible Aether)
			value = newBuffValues and 5 or 8,
			datatype = PENTEST_TYPE_VULNERABILITY,
			},

	}	--Corrosive Armor ignores all resistance

	return AbilityData

end

local function GetCleanDimensions(x, y)

	if type(x) == "number" then x = math.max(zo_round(x)*dx - 0.02, 0) end
	if type(y) == "number" then y = math.max(zo_round(y)*dx - 0.02, 0) end

	return x, y

end

local function ApplyTLWSizes()

	local dbtlw = db.tlw

	local BG = tlw:GetNamedChild("Bg")
	BG:SetAlpha(db.opacity/100)

	local penControl = tlw:GetNamedChild("PenetrationControl")

	local width = dbtlw.width
	local height = dbtlw.height

	local spellPenControl = penControl:GetNamedChild("Spell")

	if db.spellpen then

		spellPenControl:SetHidden(false)
		spellPenControl:SetDimensions(GetCleanDimensions(width + 4 , height + 8))

		local penBarS = spellPenControl:GetNamedChild("Bar")
		penBarS:SetDimensions(GetCleanDimensions(width, height))
		penBarS:SetCenterColor(0.27, 0.27, 0.6, 1)

		local penBgS = spellPenControl:GetNamedChild("Bg")
		penBgS:SetDimensions(GetCleanDimensions(width, height))

		local penLabelS = spellPenControl:GetNamedChild("Label")
		penLabelS:SetFont(string.format("%s|%d|soft-shadow-thin", BOLD_FONT, height*.75 ))

	else

		spellPenControl:SetHidden(true)

	end

	local weaponPenControl = penControl:GetNamedChild("Weapon")

	if db.weaponpen then

		weaponPenControl:SetHidden(false)
		weaponPenControl:SetDimensions(GetCleanDimensions(width + 4 , height + 8))

		local penBarW = weaponPenControl:GetNamedChild("Bar")
		penBarW:SetDimensions(GetCleanDimensions(width, height))
		penBarW:SetCenterColor(0.33, 0.6, 0.27, 1)

		local penBgW = weaponPenControl:GetNamedChild("Bg")
		penBgW:SetDimensions(GetCleanDimensions(width, height))

		local penLabelW = weaponPenControl:GetNamedChild("Label")
		penLabelW:SetFont(string.format("%s|%d|soft-shadow-thin", BOLD_FONT, height *.75 ))

	else

		weaponPenControl:SetHidden(true)

	end

	local size = db.iconsize
	local iconControl = tlw:GetNamedChild("IconsControl")
	iconControl:SetDimensions(GetCleanDimensions((size*2)+8, size + 8))

	local icon1 = iconControl:GetNamedChild("OBIcon")
	local icon2 = iconControl:GetNamedChild("VulnerabilityIcon")

	if db.OffBalanceIcon then

		icon1:SetDimensions(GetCleanDimensions(size, size))
		icon1:SetHidden(false)

		local counter = icon1:GetNamedChild("Label")
		counter:SetFont(string.format("%s|%d|soft-shadow-thin", BOLD_FONT, size *.75 ))

	else

		icon1:SetHidden(true)

	end

	if db.MinorVulnerabilityIcon then

		icon2:SetDimensions(GetCleanDimensions(size, size))
		icon2:ClearAnchors()
		icon2:SetAnchor(LEFT, db.OffBalanceIcon and icon1 or iconControl, db.OffBalanceIcon and RIGHT or LEFT, db.OffBalanceIcon and 4 or 0, 0)
		icon2:SetHidden(false)

		local counter2 = icon2:GetNamedChild("Label")
		counter2:SetFont(string.format("%s|%d|soft-shadow-thin", BOLD_FONT, size *.75 ))

	else

		icon2:SetHidden(true)

	end

	tlw:SetDimensions(1,1)
	penControl:SetDimensions(1,1)
	iconControl:SetDimensions(1,1)

end

local function UpdateControl(spellpen, weaponpen, vulnerability, offBalanceStatus, offBalanceTime, vulnTime)

	local maxwidth = db.tlw.width
	local maxpen = db.maxpen

	local penControl = tlw:GetNamedChild("PenetrationControl")

	local spellPenControl = penControl:GetNamedChild("Spell")

	local penBar = spellPenControl:GetNamedChild("Bar")
	local penLabel = spellPenControl:GetNamedChild("Label")

	local sizeS = math.min(spellpen / maxpen, 1)
	local sizeW = math.min(weaponpen / maxpen, 1)

	local widthS, widthW = GetCleanDimensions(sizeS * maxwidth, sizeW * maxwidth)

	local textcolorS = spellpen >= maxpen and {1, 0, 0, 1} or {1, 1, 1, 1}
	local textcolorW = weaponpen >= maxpen and {1, 0, 0, 1} or {1, 1, 1, 1}

	penBar:SetWidth(widthS)
	penLabel:SetText(spellpen)
	penLabel:SetColor(unpack(textcolorS))

	local weaponPenControl = penControl:GetNamedChild("Weapon")

	local penBar2 = weaponPenControl:GetNamedChild("Bar")
	local penLabel2 = weaponPenControl:GetNamedChild("Label")

	penBar2:SetWidth(widthW)
	penLabel2:SetText(weaponpen)
	penLabel2:SetColor(unpack(textcolorW))

	local iconControl = tlw:GetNamedChild("IconsControl")

	local iconid = offBalanceStatus == 2 and 134599 or 39077
	local color = offBalanceStatus == 1 and {0, .7, 0, 1} or {1, 0, 0, 1}

	local icon1 = iconControl:GetNamedChild("OBIcon")
	icon1:SetHidden((not db.OffBalanceIcon) or offBalanceStatus < 1)
	icon1:SetTexture(GetAbilityIcon(iconid))
	icon1:GetNamedChild("Bg"):SetEdgeColor(unpack(color))

	local label = icon1:GetNamedChild("Label")

	label:SetColor(unpack(color))
	label:SetText(string.format("%.1f", offBalanceTime))

	local icon2 = iconControl:GetNamedChild("VulnerabilityIcon")
	icon2:SetHidden((not db.MinorVulnerabilityIcon) or vulnerability == 0)

	local label2 = icon2:GetNamedChild("Label")

	label2:SetText(string.format("%.1f", vulnTime))

end

local function DestroyControl()

	tlw:Toggle(false)

end

local function UpdateData()	-- acquire data on when reticle is over a target

	if db.onlyCombat and (not IsUnitInCombat("player")) then

		tlw:Toggle(false)
		return

	else

		tlw:Toggle(true)

	end

	local baseSpellPen = GetPlayerStat(STAT_SPELL_PENETRATION, STAT_BONUS_OPTION_APPLY_BONUS)
	local baseWeaponPen = GetPlayerStat(STAT_PHYSICAL_PENETRATION, STAT_BONUS_OPTION_APPLY_BONUS)

	local sums = {baseSpellPen, baseWeaponPen, 0, 0}
	local offBalanceStatus = 0
	local offBalanceTime = 0
	local vulnTime = 0

	for i = 1,GetNumBuffs("player") do

		local buffName, timeStarted, timeEnding, buffSlot, stackCount, iconFilename, buffType, effectType, abilityType, statusEffectType, abilityId, canClickOff, castByPlayer = GetUnitBuffInfo("player", i)

		if abilityId == 51176 and stackCount > 1 then

			sums[PENTEST_TYPE_WEAPONPEN] = sums[PENTEST_TYPE_WEAPONPEN] + 860 * (stackCount - 1)
			break

		end
	end

	local AbilityData = GetAbilityData()

	for i = 1,GetNumBuffs("reticleover") do

		local buffName, timeStarted, timeEnding, buffSlot, stackCount, iconFilename, buffType, effectType, abilityType, statusEffectType, abilityId, canClickOff, castByPlayer = GetUnitBuffInfo("reticleover", i)

		local data = AbilityData[GetAbilityName(abilityId)] or AbilityData[abilityId]

		if data then

			local datatype = data.datatype

			if datatype >= 1 and datatype <= 4 then

				local value = abilityId == 75753 and AlkoshSlotData[buffSlot] or data.value

				sums[datatype] = sums[datatype] + value

			elseif datatype == PENTEST_TYPE_OFFBALANCE then

				offBalanceStatus = data.value

				offBalanceTime = zo_roundToNearest(timeEnding - GetGameTimeMilliseconds()/1000, 0.1)
			end

			if datatype == 4 then vulnTime = zo_roundToNearest(timeEnding - GetGameTimeMilliseconds()/1000, 0.1) end
		end
	end

	local spellpen = sums[PENTEST_TYPE_SPELLPEN] + sums[PENTEST_TYPE_ALLPEN]
	local weaponpen = sums[PENTEST_TYPE_WEAPONPEN] + sums[PENTEST_TYPE_ALLPEN]
	local vulnerability = sums[PENTEST_TYPE_VULNERABILITY]

	UpdateControl(spellpen, weaponpen, vulnerability, offBalanceStatus, offBalanceTime, vulnTime)

end

local function onTargetChange()

	if DoesUnitExist("reticleover") == true and (GetUnitReaction("reticleover") == UNIT_REACTION_HOSTILE or GetUnitReaction("reticleover") == UNIT_REACTION_NEUTRAL) then

		EVENT_MANAGER:RegisterForUpdate("PenTest_Update", 100, UpdateData)
		UpdateData()

	else

		DestroyControl()
		EVENT_MANAGER:UnregisterForUpdate("PenTest_Update")

	end
end

local function onCombatState(event, inCombat)  -- called by Event

	if db.onlyCombat then tlw:Toggle(inCombat) end
	onTargetChange()

end

local function onAlkoshDmg(eventCode, result, isError, abilityName, abilityGraphic, abilityActionSlotType, sourceName, sourceType, targetName, targetType, hitValue, powerType, damageType, log, sourceUnitId, targetUnitId, abilityId, overflow)

	local fullValue = hitValue + (overflow or 0)

	AlkoshData[targetUnitId] = fullValue

	Print(LOG_LEVEL_DEBUG, "Alkosh hit: %d (unit: %d) %s (%d)", fullValue, targetUnitId, abilityName, abilityId)

end

local function onAlkoshBuff(_, changeType, effectSlot, _, unitTag, _, endTime, stackCount, _, _, effectType, abilityType, _, unitName, unitId, abilityId, sourceType)

	AlkoshSlotData[effectSlot] = AlkoshData[unitId]

	Print(LOG_LEVEL_DEBUG, "Alkosh unit to slot: %d -> %d", unitId, effectSlot)

end

function PenTest.MakeMenu()
    -- load the settings->addons menu library
	local menu = LibAddonMenu2
	local def = PenTest.defaults

    -- the panel for the addons menu
	local panel = {
		type = "panel",
		name = "PenTest",
		displayName = "PenTest",
		author = "Solinur",
        version = PenTest.version or "",
		registerForRefresh = false,
	}

	local addonpanel = menu:RegisterAddonPanel("PenTest_Options", panel)

	local function ClearItems()

		if PenTest.inCombat then return end
		tlw:SetHidden(true)

	end

	local function ShowItems(currentpanel)

		if currentpanel ~= addonpanel then return end
		tlw:SetHidden(false)
		ApplyTLWSizes()

	end

    --this adds entries in the addon menu
	local options = {
		{
			type = "checkbox",
			name = GetString(SI_PENTEST_MENU_ACCOUNTWIDE),
			tooltip = GetString(SI_PENTEST_MENU_ACCOUNTWIDE_TOOLTIP),
			default = def.accountwide,
			getFunc = function() return PenTest_Save.Default[GetDisplayName()]['$AccountWide']["accountwide"] end,
			setFunc = function(value) PenTest_Save.Default[GetDisplayName()]['$AccountWide']["accountwide"] = value end,
			requiresReload = true,
		},
		{
			type = "checkbox",
			name = GetString(SI_PENTEST_MENU_LOCK),
			tooltip = GetString(SI_PENTEST_MENU_LOCK_TOOLTIP),
			default = def.locked,
			getFunc = function() return db.locked end,
			setFunc = function(value)
						db.locked = value
						tlw:SetMovable(not value)
						tlw:SetMouseEnabled(not value)
					  end,
		},
		{
			type = "slider",
			name = GetString(SI_PENTEST_MENU_BG_OPACITY),
			tooltip = GetString(SI_PENTEST_MENU_BG_OPACITY_TOOLTIP),
			min = 0,
			max = 100,
			step = 5,
			default = def.opacity,
			getFunc = function() return db.opacity end,
			setFunc = function(value)
						db.opacity = value
						ApplyTLWSizes()
					  end,
		},
		{
			type = "slider",
			name = GetString(SI_PENTEST_MENU_WINDOW_WIDTH),
			tooltip = GetString(SI_PENTEST_MENU_WINDOW_WIDTH_TOOLTIP),
			min = 100,
			max = 500,
			step = 10,
			default = def.tlw.width,
			getFunc = function() return zo_round(db.tlw.width) end,
			setFunc = function(value)
						db.tlw.width = zo_round(value/dx)*dx
						ApplyTLWSizes()
					  end,
		},
		{
			type = "slider",
			name = GetString(SI_PENTEST_MENU_WINDOW_HEIGHT),
			tooltip = GetString(SI_PENTEST_MENU_WINDOW_HEIGHT_TOOLTIP),
			min = 15,
			max = 40,
			step = 1,
			default = def.tlw.height,
			getFunc = function() return zo_round(db.tlw.height) end,
			setFunc = function(value)
						db.tlw.height = zo_round(value/dx)*dx
						ApplyTLWSizes()
					  end,
		},
		{
			type = "slider",
			name = GetString(SI_PENTEST_MENU_ICONSIZE),
			tooltip = GetString(SI_PENTEST_MENU_ICONSIZE_TOOLTIP),
			min = 15,
			max = 40,
			step = 1,
			default = def.iconsize,
			getFunc = function() return zo_round(db.iconsize) end,
			setFunc = function(value)
						db.iconsize = zo_round(value/dx)*dx
						ApplyTLWSizes()
					  end,
		},
		{
			type = "checkbox",
			name = GetString(SI_PENTEST_MENU_SHOW_SPELLPEN),
			tooltip = GetString(SI_PENTEST_MENU_SHOW_SPELLPEN_TOOLTIP),
			default = def.spellpen,
			getFunc = function() return db.spellpen end,
			setFunc = function(value)
						db.spellpen = value
						ApplyTLWSizes()
					  end,
		},
		{
			type = "checkbox",
			name = GetString(SI_PENTEST_MENU_SHOW_WEAPONPEN),
			tooltip = GetString(SI_PENTEST_MENU_SHOW_WEAPONPEN_TOOLTIP),
			default = def.weaponpen,
			getFunc = function() return db.weaponpen end,
			setFunc = function(value)
						db.weaponpen = value
						ApplyTLWSizes()
					  end,
		},
		{
			type = "checkbox",
			name = GetString(SI_PENTEST_MENU_SHOW_ICON):format(GetString(SI_PENTEST_OFF_BALANCE)),
			tooltip = GetString(SI_PENTEST_MENU_SHOW_WEAPONPEN_TOOLTIP):format(GetString(SI_PENTEST_OFF_BALANCE)),
			default = def.OffBalanceIcon,
			getFunc = function() return db.OffBalanceIcon end,
			setFunc = function(value)
						db.OffBalanceIcon = value
						ApplyTLWSizes()
					  end,
		},
		{
			type = "checkbox",
			name = GetString(SI_PENTEST_MENU_SHOW_ICON):format(GetString(SI_PENTEST_MINOR_VULNERABILITY)),
			tooltip = GetString(SI_PENTEST_MENU_SHOW_WEAPONPEN_TOOLTIP):format(GetString(SI_PENTEST_MINOR_VULNERABILITY)),
			default = def.MinorVulnerabilityIcon,
			getFunc = function() return db.MinorVulnerabilityIcon end,
			setFunc = function(value)
						db.MinorVulnerabilityIcon = value
						ApplyTLWSizes()
					  end,
		},
		{
			type = "checkbox",
			name = GetString(SI_PENTEST_MENU_INCOMBAT),
			tooltip = GetString(SI_PENTEST_MENU_INCOMBAT_TOOLTIP),
			default = def.onlyCombat,
			getFunc = function() return db.onlyCombat end,
			setFunc = function(value)
						db.onlyCombat = value
					  end,
		},
		{
			type = "slider",
			name = GetString(SI_PENTEST_MENU_MAXPEN),
			tooltip = GetString(SI_PENTEST_MENU_MAXPEN_TOOLTIP),
			min = 1,
			max = 18200,
			step = 1,
			default = def.maxpen,
			getFunc = function() return db.maxpen end,
			setFunc = function(value)
						db.maxpen = math.max(value, 1)
					  end,
		},
		{
			type = "editbox",
			name = GetString(SI_PENTEST_MENU_CRUSHER),
			tooltip = GetString(SI_PENTEST_MENU_CRUSHER_TOOLTIP),
			default = def.crusherValue,
			getFunc = function() return db.crusherValue end,
			setFunc = function(value)
					if value then

						local number = zo_round(tonumber(value) or def.crusherValue)
						db.crusherValue = number

					end
				end
		},
	}

	menu:RegisterOptionControls("PenTest_Options", options)

	CALLBACK_MANAGER:RegisterCallback("LAM-PanelOpened", ShowItems )
	CALLBACK_MANAGER:RegisterCallback("LAM-PanelClosed", ClearItems )

	return menu
end

-- default values (see http://wiki.esoui.com/AddOn_Quick_Questions#How_do_I_save_settings_on_the_local_machine.3F)
PenTest.defaults = {
	["tlw"] = {x = 150*dx, y = 150*dx, height = zo_round(25/dx)*dx, width = zo_round(150/dx)*dx},
	["iconsize"] = 25,
	["accountwide"] = true,
	["locked"] = false,
	["maxpen"] = 18200,
	["onlyCombat"] = false,
	["opacity"] = 100,
	["spellpen"] = true,
	["weaponpen"] = true,
	["OffBalanceIcon"] = true,
	["MinorVulnerabilityIcon"] = true,
	["crusherValue"] = 2108,

}

-- Initialization
function PenTest:Initialize(event, addon)

	local name = self.name
	if addon ~= name then return end --Only run if this addon has been loaded

	-- load saved variables

	db = ZO_SavedVars:NewAccountWide(name.."_Save", 1, nil, self.defaults) -- taken from Aynatirs guide at http://www.esoui.com/forums/showthread.php?t=6442

	if db.accountwide == false then

		db = ZO_SavedVars:NewCharacterIdSettings(name.."_Save", 1, nil, self.defaults)
		db.accountwide = false

	end

	PenTest.db = db

	--register Events
	em:UnregisterForEvent(name.."load", EVENT_ADD_ON_LOADED)

	-- em:RegisterForEvent(name.."unit", EVENT_COMBAT_EVENT, onUnitDeath)
	-- em:AddFilterForEvent(name.."unit", EVENT_COMBAT_EVENT, REGISTER_FILTER_COMBAT_RESULT, 2260, REGISTER_FILTER_IS_ERROR, false) -- not needed?

	-- em:RegisterForEvent(name.."unit2", EVENT_COMBAT_EVENT, onUnitDeath)
	-- em:AddFilterForEvent(name.."unit2", EVENT_COMBAT_EVENT, REGISTER_FILTER_COMBAT_RESULT, 2262, REGISTER_FILTER_IS_ERROR, false)

	em:RegisterForEvent(name.."combat", EVENT_PLAYER_COMBAT_STATE, onCombatState)
	em:RegisterForEvent(name.."target", EVENT_RETICLE_TARGET_CHANGED , onTargetChange)

	em:RegisterForEvent(name.."AlkoshDamage", EVENT_COMBAT_EVENT, onAlkoshDmg)
	local filter1 = em:AddFilterForEvent(name.."AlkoshDamage", EVENT_COMBAT_EVENT, REGISTER_FILTER_ABILITY_ID, 75752, REGISTER_FILTER_IS_ERROR, false)
	
	em:RegisterForEvent(name.."AlkoshBuff", EVENT_EFFECT_CHANGED, onAlkoshBuff)
	local filter2 = em:AddFilterForEvent(name.."AlkoshBuff", EVENT_EFFECT_CHANGED, REGISTER_FILTER_ABILITY_ID, 75753, REGISTER_FILTER_IS_ERROR, false)

	self.playername = zo_strformat("<<!aC:1>>",GetUnitName("player"))
	self.inCombat = IsUnitInCombat("player")

	self.MakeMenu()

	-- setup display frame

	tlw = PENTEST_TLW
	local dbtlw = db.tlw

	local isTLWShown = false
	local fragment = ZO_SimpleSceneFragment:New(tlw)

	function tlw.Toggle(self, show)

		show = show or not db.locked

		if show == isTLWShown then return end

		if show == true then

			HUD_SCENE:AddFragment(fragment)
			HUD_UI_SCENE:AddFragment(fragment)

		else

			HUD_SCENE:RemoveFragment(fragment)
			HUD_UI_SCENE:RemoveFragment(fragment)

		end

		isTLWShown = show
	end

	if (dbtlw) then

		tlw:ClearAnchors()
		tlw:SetAnchor(TOPLEFT, GuiRoot, TOPLEFT, dbtlw.x*dx, dbtlw.y*dx)

	end

	tlw:SetMovable(not db.locked)
	tlw:SetMouseEnabled(not db.locked)

	tlw:SetHandler("OnMoveStop", function(control)

		local x, y = control:GetScreenRect()

		dbtlw.x = zo_round(x/dx)
		dbtlw.y = zo_round(y/dx)

		tlw:ClearAnchors()
		tlw:SetAnchor(TOPLEFT, GuiRoot, TOPLEFT, dbtlw.x*dx, dbtlw.y*dx)
	end)

	ApplyTLWSizes()

	-- Assign Textures:

	local tex1 = GetAbilityIcon(39077) -- Off Balance
	local tex2 = GetAbilityIcon(68359) -- Minor Vulnerabiltiy

	local iconControl = tlw:GetNamedChild("IconsControl")

	local icon1 = iconControl:GetNamedChild("OBIcon")
	icon1:SetTexture(tex1)

	local icon2 = iconControl:GetNamedChild("VulnerabilityIcon")
	icon2:SetTexture(tex2)

	-- setup display scenes

	onTargetChange()

end

-- Finally, we'll register our event handler function to be called when the proper event occurs.
em:RegisterForEvent(PenTest.name.."load", EVENT_ADD_ON_LOADED, function(...) PenTest:Initialize(...) end)